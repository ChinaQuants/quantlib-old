
/*
 Copyright (C) 2014 Eric Ehlers

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software developed by the QuantLib Group; you can
 redistribute it and/or modify it under the terms of the QuantLib License;
 either version 1.0, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 QuantLib License for more details.

 You should have received a copy of the QuantLib License along with this
 program; if not, please email quantlib-dev@lists.sf.net

 The QuantLib License is also available at <http://quantlib.org/license.shtml>
 The members of the QuantLib Group are listed in the QuantLib License
*/

/*! \page features Features

\section idx_feat_1 Object Repository

Reposit implements a repository in which objects may be instantiated, queried,
updated, and destroyed, facilitating deployment of object oriented
functionality to procedural platforms such as spreadsheets.

The repository supports the following features:

\li \b Addins:  Bindings to Excel and C++ are provided.  The C++ addin has the same interface as the Excel addin, allowing to replicate the behavior of your spreadsheets in an automated process.

\li \b Inheritance:  Inheritance relationships in your C++ library are preserved in the object oriented interface that is exported to Excel.  For example suppose you have a base class Instrument and a derived class Bond.  In Excel you can call function Bond() to instantiate a Bond object and store it in the object repository, then you can call addin function InstrumentPrice to invoke member function Instrument::Price on the Bond object.

\li \b Serialization:  The classes in your C++ library are held in wrapper classes before being stored in the repository.  These wrapper classes provide native support for serialization, allowing you to export and import your objects to/from Excel and C++.

\li \b Processors:  Processors restore the state of objects after they are deserialized.  For example, suppose you have two objects which are linked in your spreadsheet, and then you serialize the contents of the object repository to disk.  Processors restore the state of the objects when they are reloaded.

\li \b Conversions:  A large number of conversions are supported to/from Excel and C++ datatypes, and additional conversions can be created for the types in your C++ library.

\li \b Coercions:  A coercion is a list of conversions.  You can configure a function which accepts an input parameter of unknown type.  The conversions are attempted one after the other until one succeeds.

\li \b Enumerations:  Enumerations associate a string to a C++ type.  Suppose your C++ library defines an enumeration Option::Type with values Put or Call.  Reposit's enumeration registry allows the Excel user to use the strings "Put" and "Call" to refer to the corresponding enumerations in your C++ library.

\section idx_feat_2 Code Generation

Reposit provides a utility which parses the header files of your C++ library and automatically creates corresponding addins in C++ and Excel which are linked to the object repository.  This allows you to export the functionality of your library to Excel.  The code generation is implemented as a SWIG module.

The code generation utility supports the following features:

\li \b Functions:  Simple functions in your C++ library are easily exported to target platforms.

\li \b Objects:  Classes in your C++ library are exported to the C++ and Excel addins.  An autogenerated interface to these classes allows end users to construct objects, store them in the repository, and query and update them.

\li \b Inheritance:  Object hierarchies in your C++ library are recognized by the code generation utility and preserved in the functions in the Excel/C++ addins.

\li \b Conversions:  Autogenerated addin code can include the necessary conversions of inputs and outputs between the end user interface and your underlying C++ library.

\li \b Typedefs:  Typedefs defined in your C++ library are recognized by the code generation utility and the appropriate conversions are provided for inputs from the end user.

\li \b Enumerations:  Autogenerated code can include support for the enumeration registry in the object repository.

\li \b Serialization:  All of the code required to serialize your objects is generated automatically.

\li \b Overrides:  A facility is provided to override the autogenerated code in case you want to customize it.

*/

